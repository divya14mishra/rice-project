{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let FileService = /*#__PURE__*/(() => {\n  class FileService {\n    constructor(http) {\n      this.http = http;\n      this.baseURL = \"http://3.138.106.133:3000\";\n      this.dummyFileList = '[{\"fileId\":\"\",\"fileName\":\"Sample(1).mat\",\"status\":\"Not Reviewed\",\"diceOutput\":\"0.53\",\"share\":\"Share with everybody\",\"imageUrl\":\"https://raw.githubusercontent.com/PreyeaRegmi/RICE-Portal/dev/src/assets/img/60190-S70.jpg\",\"matUrl\":\"\",\"fileDetail\":{\"metaData\":[\"Sample Organism : Mitochondria\",\"Sampling Time : 1800 miliseconds\"],\"scanParameter\":[\"Resolution of Image : 3840 X 2160\",\"No of images in volume : 30\"],\"analyticsOutput\":[\"Precision : N/A\",\"DiceOutput : .53\"],\"shareStatus\":[\"Share Status : Share with everybody\"]}}]';\n      this.dummyRecommendations = '[{\"actionId\":\"1\",\"actionMessage\":\"Change Resolution of your image to\",\"actionsOptions\":[{\"actionOptionId\":\"1\",\"actionName\":\"720p\",\"semCommand\":{}},{\"actionOptionId\":\"3\",\"actionName\":\"1080p\",\"semCommand\":{}},{\"actionOptionId\":\"4\",\"actionName\":\"1920p\",\"semCommand\":{}},{\"actionOptionId\":\"5\",\"actionName\":\"3160p\",\"semCommand\":{}}]},{\"actionId\":\"2\",\"actionMessage\":\"Change size of image to\",\"actionsOptions\":[{\"actionOptionId\":\"8\",\"actionName\":\"1024 X 1024\",\"semCommand\":{}},{\"actionOptionId\":\"9\",\"actionName\":\"2048 X 2048\",\"semCommand\":{}}]},{\"actionId\":\"3\",\"actionMessage\":\"Move sample stage to\",\"actionsOptions\":[{\"actionOptionId\":\"10\",\"actionName\":\"X : 125\",\"semCommand\":{}},{\"actionOptionId\":\"11\",\"actionName\":\"Y : 250\",\"semCommand\":{}}]}]';\n    }\n\n    getFiles() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let fileList = JSON.parse(this.dummyFileList);\n        yield this.http.get(this.baseURL + \"/retrieve_files\").toPromise().then(data => fileList = data).catch(err => {\n          console.log(\"Error while fetching file list\");\n        });\n        console.log(fileList[0]);\n        return fileList;\n      });\n    }\n\n    getRecommendation() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let recommendationList = JSON.parse(this.dummyRecommendations);\n        yield this.http.get(this.baseURL + \"/get_action_recommendation\").toPromise().then(data => recommendationList = data).catch(err => {\n          console.log(\"Error while fetching recommendation file list\");\n        });\n        return recommendationList;\n      });\n    }\n\n    performAnalytics(fileId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const request = {\n          \"fileId\": fileId\n        };\n        yield this.http.post(this.baseURL + \"/perform_analytics\", request).toPromise().catch(err => {\n          console.log(\"Error while performing analytics\");\n          return true;\n        });\n        return true;\n      });\n    }\n\n  }\n\n  FileService.ɵfac = function FileService_Factory(t) {\n    return new (t || FileService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  FileService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FileService,\n    factory: FileService.ɵfac,\n    providedIn: 'root'\n  });\n  return FileService;\n})();","map":null,"metadata":{},"sourceType":"module"}